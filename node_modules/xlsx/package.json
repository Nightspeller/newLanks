{
  "name": "xlsx",
  "version": "0.7.6-g",
  "author": {
    "name": "sheetjs"
  },
  "description": "Excel 2007+ spreadsheet (XLSB/XLSX/XLSM) parser and writer",
  "keywords": [
    "excel",
    "xlsx",
    "xlsb",
    "xlsm",
    "office",
    "spreadsheet"
  ],
  "bin": {
    "xlsx": "./bin/xlsx.njs"
  },
  "main": "./xlsx",
  "dependencies": {
    "ssf": "~0.7.1",
    "codepage": "~1.2.0",
    "cfb": ">=0.9.1",
    "jszip": "2.2.2",
    "commander": ""
  },
  "devDependencies": {
    "mocha": "",
    "xlsjs": "",
    "uglify-js": "",
    "jasmine-node": "x"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/SheetJS/js-xlsx.git"
  },
  "scripts": {
    "pretest": "git submodule init && git submodule update",
    "test": "make test",
    "test-jasmine": "jasmine-node --verbose tests/"
  },
  "config": {
    "blanket": {
      "pattern": "xlsx.js"
    }
  },
  "bugs": {
    "url": "https://github.com/SheetJS/js-xlsx/issues"
  },
  "license": "Apache-2.0",
  "engines": {
    "node": ">=0.8"
  },
  "readme": "# xlsx\n\nParser and writer for XLSX/XLSM/XLSB files.  Cleanroom implementation from the\nISO 29500  Office Open XML specifications, [MS-XLSB], and related documents.\n\n## Installation\n\nIn [nodejs](https://www.npmjs.org/package/xlsx):\n\n    npm install xlsx\n\nIn the browser:\n\n    <!-- This is the only file you need (includes xlsx.js and jszip) -->\n    <script lang=\"javascript\" src=\"dist/xlsx.core.min.js\"></script>\n\nIn [bower](http://bower.io/search/?q=js-xlsx):\n\n    bower install js-xlsx\n\nCDNjs automatically pulls the latest version and makes all versions available at\n<http://cdnjs.com/libraries/xlsx>\n\nOlder versions of this README recommended a more explicit approach:\n\n    <!-- JSZip must be included before xlsx.js -->\n    <script lang=\"javascript\" src=\"/path/to/jszip.js\"></script>\n    <script lang=\"javascript\" src=\"/path/to/xlsx.js\"></script>\n\n## Optional Modules\n\nThe nodejs version automatically requires modules for additional features.  Some\nof these modules are rather large in size and are only needed in special\ncircumstances, so they do not ship with the core.  For browser use, they must\nbe included directly:\n\n    <!-- international support from https://github.com/sheetjs/js-codepage -->\n    <script src=\"dist/cpexcel.js\"></script>\n\nAn appropriate version for each dependency is included in the dist/ directory.\n\nThe complete single-file version is generated at `dist/xlsx.full.min.js`\n\n## ECMAScript 5 compatibility\n\nSince xlsx.js uses ES5 functions like `Array#forEach`, older browsers require\n[Polyfills](http://git.io/QVh77g).  This repo and the gh-pages branch include\n[a shim](https://github.com/SheetJS/js-xlsx/blob/master/shim.js)\n\nTo use the shim, add the shim before the script tag that loads xlsx.js:\n\n    <script type=\"text/javascript\" src=\"/path/to/shim.js\"></script>\n\n## Parsing Workbooks\n\nFor parsing, the first step is to read the file.\n\n- nodejs:\n\n```\nif(typeof require !== 'undefined') XLSX = require('xlsx');\nvar workbook = XLSX.readFile('test.xlsx');\n/* DO SOMETHING WITH workbook HERE */\n```\n\n- ajax:\n\n```\n/* set up XMLHttpRequest */\nvar url = \"test_files/formula_stress_test_ajax.xlsx\";\nvar oReq = new XMLHttpRequest();\noReq.open(\"GET\", url, true);\noReq.responseType = \"arraybuffer\";\n\noReq.onload = function(e) {\n  var arraybuffer = oReq.response;\n\n  /* convert data to binary string */\n  var data = new Uint8Array(arraybuffer);\n  var arr = new Array();\n  for(var i = 0; i != data.length; ++i) arr[i] = String.fromCharCode(data[i]);\n  var bstr = arr.join(\"\");\n\n  /* Call XLSX */\n  var workbook = XLSX.read(bstr, {type:\"binary\"});\n\n  /* DO SOMETHING WITH workbook HERE */\n}\n\noReq.send();\n```\n\n- html5 drag-and-drop using readAsBinaryString:\n\n```\n/* set up drag-and-drop event */\nfunction handleDrop(e) {\n  e.stopPropagation();\n  e.preventDefault();\n  var files = e.dataTransfer.files;\n  var i,f;\n  for (i = 0, f = files[i]; i != files.length; ++i) {\n    var reader = new FileReader();\n    var name = f.name;\n    reader.onload = function(e) {\n      var data = e.target.result;\n\n      /* if binary string, read with type 'binary' */\n      var wb = XLSX.read(data, {type: 'binary'});\n\n      /* DO SOMETHING WITH workbook HERE */\n    };\n    reader.readAsBinaryString(f);\n  }\n}\ndrop_dom_element.addEventListener('drop', handleDrop, false);\n```\n\nThis example walks through every cell of every sheet and dumps the values:\n\n```\nvar sheet_name_list = workbook.SheetNames;\nsheet_name_list.forEach(function(y) {\n  var worksheet = workbook.Sheets[y];\n  for (z in worksheet) {\n    if(z[0] === '!') continue;\n    console.log(y + \"!\" + z + \"=\" + JSON.stringify(worksheet[z].v));\n  }\n});\n```\n\nComplete examples:\n\n- <http://oss.sheetjs.com/js-xlsx/> HTML5 File API / Base64 Text / Web Workers\n\nNote that older versions of IE does not support HTML5 File API, so the base64\nmode is provided for testing.  On OSX you can get the base64 encoding with:\n\n    $ <target_file.xlsx base64 | pbcopy\n\n- <http://oss.sheetjs.com/js-xlsx/ajax.html> XMLHttpRequest\n\n- <https://github.com/SheetJS/js-xlsx/blob/master/bin/xlsx.njs> nodejs\n\nThe nodejs version installs a binary `xlsx` which can read XLSX/XLSM/XLSB\nfiles and output the contents in various formats.  The source is available at\n`xlsx.njs` in the bin directory.\n\nSome helper functions in `XLSX.utils` generate different views of the sheets:\n\n- `XLSX.utils.sheet_to_csv` generates CSV\n- `XLSX.utils.sheet_to_json` generates an array of objects\n- `XLSX.utils.get_formulae` generates a list of formulae\n\n## Writing Workbooks\n\nAssuming `workbook` is a workbook object, just call write:\n\n- nodejs write to file:\n\n```\n/* output format determined by filename */\nXLSX.writeFile(workbook, 'out.xlsx');\n```\n\n- write to binary string (using FileSaver.js)\n\n```\n/* bookType can be 'xlsx' or 'xlsm' or 'xlsb' */\nvar wopts = { bookType:'xlsx', bookSST:true, type:'binary' };\n\nvar wbout = XLSX.write(workbook,wopts);\n\nfunction s2ab(s) {\n  var buf = new ArrayBuffer(s.length);\n  var view = new Uint8Array(buf);\n  for (var i=0; i!=s.length; ++i) view[i] = s.charCodeAt(i) & 0xFF;\n  return buf;\n}\n\nsaveAs(new Blob([s2ab(wbout)],{type:\"\"}), \"test.xlsx\")\n```\n\nComplete examples:\n\n- <http://sheetjs.com/demos/writexlsx.html> generates a simple file\n- <http://git.io/WEK88Q> writing an array of arrays in nodejs\n\n## Interface\n\n`XLSX` is the exposed variable in the browser and the exported nodejs variable\n\n\n`XLSX.read(data, read_opts)` attempts to parse `data`.\n\n`XLSX.readFile(filename, read_opts)` attempts to read `filename` and parse.\n\n`XLSX.write(wb, write_opts)` attempts to write the workbook `wb`\n\n`XLSX.writeFile(wb, filename, write_opts)` attempts to write `wb` to `filename`\n\n## Cell Object Description\n\njs-xlsx conforms to the Common Spreadsheet Format (CSF):\n\n`.SheetNames` is an ordered list of the sheets in the workbook\n\n`.Sheets[sheetname]` returns a data structure representing the sheet.  Each key\nthat does not start with `!` corresponds to a cell (using `A-1` notation).\n\n`.Sheets[sheetname][address]` returns the specified cell:\n\n- `.v` : the raw value of the cell\n- `.w` : the formatted text of the cell (if applicable)\n- `.t` : the type of the cell (constrained to the enumeration `ST_CellType` as\n  documented in page 4215 of ISO/IEC 29500-1:2012(E) )\n- `.f` : the formula of the cell (if applicable)\n- `.r` : the rich text encoding of a cell text (if applicable)\n- `.h` : an HTML rendering of the rich text (if applicable)\n- `.c` : comments associated with the cell\n- `.z` : the number format string associated with the cell (if requested)\n- `.l` : the hyperlink of the cell (.Target holds link, .tooltip is tooltip)\n- `.s` : the style/theme of the cell (if applicable)\n\nFor dates, `.v` holds the raw date code from the sheet and `.w` holds the text\n\n## Parsing Options\n\nThe exported `read` and `readFile` functions accept an options argument:\n\n| Option Name | Default | Description |\n| :---------- | ------: | :---------- |\n| cellFormula | true    | Save formulae to the .f field |\n| cellHTML    | true    | Parse rich text and save HTML to the .h field |\n| cellNF      | false   | Save number format string to the .z field |\n| cellStyles  | false   | Save style/theme info to the .s field |\n| sheetStubs  | false   | Create cell objects for stub cells |\n| sheetRows   | 0       | If >0, read the first `sheetRows` rows ** |\n| bookDeps    | false   | If true, parse calculation chains |\n| bookFiles   | false   | If true, add raw files to book object ** |\n| bookProps   | false   | If true, only parse enough to get book metadata ** |\n| bookSheets  | false   | If true, only parse enough to get the sheet names |\n| bookVBA     | false   | If true, expose vbaProject.bin to `vbaraw` field ** |\n\n- Even if `cellNF` is false, formatted text (.w) will be generated\n- In some cases, sheets may be parsed even if `bookSheets` is false.\n- `bookSheets` and `bookProps` combine to give both sets of information\n- `Deps` will be an empty object if `bookDeps` is falsy\n- `bookFiles` adds a `keys` array (paths in the ZIP) and a `files` hash (whose\n  keys are paths and values are objects representing the files)\n- `sheetRows-1` rows will be generated when looking at the JSON object output\n  (since the header row is counted as a row when parsing the data)\n- `bookVBA` merely exposes the raw vba object.  It does not parse the data.\n\nThe defaults are enumerated in bits/84_defaults.js\n\n## Writing Options\n\nThe exported `write` and `writeFile` functions accept an options argument:\n\n| Option Name | Default | Description |\n| :---------- | ------: | :---------- |\n| bookSST     | false   | Generate Shared String Table ** |\n| bookType    | 'xlsx'  | Type of Workbook (\"xlsx\" or \"xlsm\" or \"xlsb\") |\n\n- `bookSST` is slower and more memory intensive, but has better compatibility\n  with iOS Numbers\n- `bookType = 'xlsb'` is stubbed and far from complete\n- The raw data is the only thing guaranteed to be saved.  Formulae, formatting,\n  and other niceties may not be serialized (pending CSF standardization)\n\n## Tested Environments\n\n - NodeJS 0.8, 0.10 (latest release)\n - IE 6/7/8/9/10 using Base64 mode (IE10/11 using HTML5 mode)\n - FF 18 using Base64 or HTML5 mode\n - Chrome 24 using Base64 or HTML5 mode\n\nTests utilize the mocha testing framework.  Travis-CI and Sauce Labs links:\n\n - <https://travis-ci.org/SheetJS/js-xlsx> for XLSX module in nodejs\n - <https://travis-ci.org/SheetJS/SheetJS.github.io> for XLS* modules\n - <https://saucelabs.com/u/sheetjs> for XLS* modules using Sauce Labs\n\n## Test Files\n\nTest files are housed in [another repo](https://github.com/SheetJS/test_files).\n\nRunning `make init` will refresh the `test_files` submodule and get the files.\n\n## Testing\n\n`make test` will run the nodejs-based tests.  To run the in-browser tests, clone\n[the oss.sheetjs.com repo](https://github.com/SheetJS/SheetJS.github.io) and\nreplace the xlsx.js file (then fire up the browser and go to `stress.html`):\n\n```\n$ cp xlsx.js ../SheetJS.github.io\n$ cd ../SheetJS.github.io\n$ simplehttpserver # or \"python -mSimpleHTTPServer\" or \"serve\"\n$ open -a Chromium.app http://localhost:8000/stress.html\n```\n\nFor a much smaller test, run `make test_misc`.\n\n## Contributing\n\nDue to the precarious nature of the Open Specifications Promise, it is very\nimportant to ensure code is cleanroom.  Consult CONTRIBUTING.md\n\n## XLS Support\n\nXLS is available in [js-xls](http://git.io/xls).\n\n## License\n\nPlease consult the attached LICENSE file for details.  All rights not explicitly\ngranted by the Apache 2.0 license are reserved by the Original Author.\n\nIt is the opinion of the Original Author that this code conforms to the terms of\nthe Microsoft Open Specifications Promise, falling under the same terms as\nOpenOffice (which is governed by the Apache License v2).  Given the vagaries of\nthe promise, the Original Author makes no legal claim that in fact end users are\nprotected from future actions.  It is highly recommended that, for commercial\nuses, you consult a lawyer before proceeding.\n\n## References\n\nISO/IEC 29500:2012(E) \"Information technology — Document description and processing languages — Office Open XML File Formats\"\n\nOSP-covered specifications:\n\n - [MS-XLSB]: Excel (.xlsb) Binary File Format\n - [MS-XLSX]: Excel (.xlsx) Extensions to the Office Open XML SpreadsheetML File Format\n - [MS-OE376]: Office Implementation Information for ECMA-376 Standards Support\n - [MS-XLDM]: Spreadsheet Data Model File Format\n\n## Badges\n\n[![Build Status](https://travis-ci.org/SheetJS/js-xlsx.png?branch=master)](https://travis-ci.org/SheetJS/js-xlsx)\n\n[![Coverage Status](https://coveralls.io/repos/SheetJS/js-xlsx/badge.png?branch=master)](https://coveralls.io/r/SheetJS/js-xlsx?branch=master)\n\n[![githalytics.com alpha](https://cruel-carlota.pagodabox.com/ed5bb2c4c4346a474fef270f847f3f78 \"githalytics.com\")](http://githalytics.com/SheetJS/js-xlsx)\n\n",
  "readmeFilename": "README.md",
  "homepage": "https://github.com/SheetJS/js-xlsx",
  "_id": "xlsx@0.7.6-g",
  "dist": {
    "shasum": "3b6e37a4d5d47a8ef8476156e8951808f42359df"
  },
  "_from": "xlsx@",
  "_resolved": "https://registry.npmjs.org/xlsx/-/xlsx-0.7.6-g.tgz"
}
